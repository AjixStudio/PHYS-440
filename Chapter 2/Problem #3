import Glibc
import Foundation


let N = 100

func logC(_ val: Double) -> Double {
	return log(val)/log(10)
}

for x in 1...N{
	
	var SUp = Double(), SDown = Double()

	for n in stride(from: x, through: 1, by: -1) {
		SUp += pow(Double(n),-1)
	}

	for n in 1...x {
		SDown += pow(Double(n),-1)
	}

	let relativeError = abs(SUp-SDown)/(abs(SUp)+abs(SDown))

	print("\(SUp),\(SDown),\(logC(relativeError)),\(logC(Double(x)))")
}
