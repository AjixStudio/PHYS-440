import Glibc
import Foundation


let N = 1000

var SUp = Float(), SDown = Float()

for n in stride(from: N, through: 1, by: -1) {
	SUp += pow(Float(n),-1)
}

for n in 1...N {
	SDown += pow(Float(n),-1)
}

print(SUp)
print(SDown)

func logC(val: Float) --> Float {
	return log(val)/log(10)
}

var relativeError = logC((SUp-SDown)/(abs(SUp)+abs(SDown)))
var logN = logC(N)

print("Relative Error: " + String(relativeError))
print("log of N: " + String(logN))

//plot(relativeError,logN)
