import Glibc
import Foundation


for NumberOfN in 1...1000000 {
	var S1 = Double(), S2 = Double(), S3 = Double()

	for n in 1...2*NumberOfN {
		let x = Double(n)
		S1 += pow(-1.0, x) * (x/(x+1.0))
	}
	for n in 1...NumberOfN {
		let x = Double(n)
		S2 += (-1.0)*(2.0*x-1.0)/(2.0*x)
		S2 += (2.0*x)/(2*x+1.0)
	}
	for n in 1...NumberOfN {
		let x = Double(n)
		S3 += 1.0/(2.0*x*(2.0*x+1.0))
	}

	let relativeError = logC((S1-S3)/S3)
	let logN = logC(Double(NumberOfN))

	print("N: " + String(NumberOfN) + " | S1: " + String(S1) + " | S2: " + String(S2) + " | S3: " + String(S3) + " | Relative Error: " + String(relativeError) + " | logN: " + String(logN))
}

func logC(_ val: Double) -> Double {
	return log(val)/log(10)
}

//plot(relativeError,logN)
